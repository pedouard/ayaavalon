#!/usr/bin/env python
# -*- coding: utf-8 -*-
import env

import sys
import urllib
import urllib2
import json

from datetime import datetime, timedelta

from lib import utils
from lib.db import database
from withings.api import WithingsAPI
from withings.datascience.core import config

TOKEN_BERTRAND = "BccjNuPjro:APA91bFifJegvHPBk8GuhQNyn4Go1xlCVQTN_Bc9G9XkgEKxDoUHzJM3yw-3j-EWvLjKcPIxhVrhpy5n0RNVCiIh_XW1k2rxVJX5LsALP-PJPAAeyeK4lU8D50S9MEn9PSQrteDzrbUn"
TOKEN_BERTRAND = "toto"
PLAYER_INFO = json.dumps({
    "profile": ["profile A", "profile B", "profile C", "profile D"],
    "target": ["target A", "target B", "target C", "target D"]
})

sessionid = sys.argv[1]
now = datetime.now()
session = database.session()

def call(route, **kwargs):
    kwargs["groupid"] = config.get('ayaa', 'groupid')
    kwargs["sessionid"] = sessionid
    url = "http://0.0.0.0:6444" + route + "?"
    url += urllib.urlencode(kwargs)

    print "Call: " + url
    ans = urllib2.urlopen(url).read()

    try:
        res = json.loads(ans)
    except Exception, e:
        raise Exception("Failed to json decode:\n%s\n" % ans)

    if res["status"] == 0:
        return res["status"], res["body"]
    else:
        return res["status"], res["error"]

def check_status(status, body, target):
    assert status == target, "%d != %d - %s" % (status, target, body)
    print "Ok"

def check_equal(value, target):
    assert value == target, "%s != %s" % (value, target)
    print "Ok"

############################# USER API TESTS ###################################
print "Empty db"
utils.truncate_all_tables(session)

print "Get survey"
status, body = call("/survey/get")
check_status(status, body, 0)
#check_equal(body[0][1], "Technique")

"""
print "Create wrong user"
status, body = call("/player/create", userid=9824400, token="token1", deviceid=6030542)
check_status(status, body, 107)
"""

print "Create good user"
status, body = call("/player/create", userid=2064575, token="token1", info=PLAYER_INFO, deviceid=6030542)
check_status(status, body, 0)
check_equal(body["info"]["api"]["firstname"], "Paul")
check_equal(body["info"]["survey"]["target"][0], "target A")
check_equal(body["token"], "token1")
check_equal(len(body["contracts"]), 0)
check_equal(body["is_alive"], False)

status, body = call("/player/get_all")
check_status(status, body, 0)
check_equal(len(body), 1)

print "Delete it"
status, body = call("/player/delete", userid=2064575)
check_status(status, body, 0)

status, body = call("/player/get_all")
check_status(status, body, 0)
check_equal(len(body), 0)

print "Create it again"
status, body = call("/player/create", userid=2064575, token="token1", info=PLAYER_INFO, deviceid=6030542)
check_status(status, body, 0)
check_equal(body["info"]["api"]["firstname"], "Paul")
check_equal(body["info"]["survey"]["target"][0], "target A")
check_equal(body["token"], "token1")
check_equal(len(body["contracts"]), 0)
check_equal(body["is_alive"], False)

status, body = call("/player/get_all")
check_status(status, body, 0)
check_equal(len(body), 1)

print "Try create contract"
status, body = call("/contract/create", userid=2064575)
check_status(status, body, 109)

print "Update token"
status, body = call("/player/set_token", userid=2064575, token=TOKEN_BERTRAND)
check_status(status, body, 0)

print "Get user"
status, body = call("/player/get", userid=2064575)
check_status(status, body, 0)
check_equal(body["token"], TOKEN_BERTRAND)
check_equal(body["player_has_won_round"], False)

status, body = call("/player/get_all")
check_status(status, body, 0)
check_equal(body[0]["token"], TOKEN_BERTRAND)

############################# ADD A ROUND ####################################
print "Add round"
utils.add_round(session, now)
rounds = session.query(database.Round).all()
check_equal(len(rounds), 1)
r = rounds[0]
check_equal(r.is_active_round, False)

print "Start round"
utils.check_all_rounds(session)
rounds = session.query(database.Round).all()
check_equal(len(rounds), 1)
r = rounds[0]
check_equal(r.is_active_round, True)

print "Get user"
status, body = call("/player/get", userid=2064575)
check_status(status, body, 0)
check_equal(body["player_has_won_round"], True)

print "Try create new contract"
status, body = call("/contract/create", userid=2064575)
check_status(status, body, 104)

print "Create second user"
status, body = call("/player/create", userid=7132639, token="token3", info=PLAYER_INFO, deviceid=6345364)
check_status(status, body, 0)
check_equal(body["info"]["api"]["lastname"], "Testing")

utils.end_round(r, session)
utils.start_round(r, session)

############################# RESOLVE A CONTRACT ###############################
"""
print "Try create new contract"
status, body = call("/contract/create", userid=2064575)
check_status(status, body, 0)
check_equal(body["targetid"], 7132639)
check_equal(body["ownerid"], 2064575)
check_equal(len(body["info"]["survey"]["target"]), 1)
contractid = body["contractid"]
"""

print "Check get user"
status, body = call("/player/get", userid=2064575)
check_status(status, body, 0)
check_equal(len(body["contracts"]), 1)
contractid = body["contracts"][0]["contractid"]
check_equal(body["player_has_won_round"], False)

print "Complete contract"
status, body = call("/contract/complete", contractid=contractid)
check_status(status, body, 0)
check_equal(body["is_active"], False)
check_equal(body["is_completed"], True)

print "Check contract owner"
status, body = call("/player/get", userid=2064575)
check_status(status, body, 0)
check_equal(len(body["contracts"]), 1)
check_equal(body["contracts"][0]["info"]["api"]["age"], "26")
check_equal(body["total_points"], 1)
check_equal(body["round_points"], 1)
check_equal(body["is_alive"], True)

print "Check contract target"
status, body = call("/player/get", userid=7132639)
check_status(status, body, 0)
check_equal(len(body["contracts"]), 1)
check_equal(body["total_points"], 0)
check_equal(body["round_points"], 0)
check_equal(body["is_alive"], False)

print "Try create new contract"
status, body = call("/contract/create", userid=2064575)
check_status(status, body, 104)

############################# END A ROUND ######################################
print "End round"
utils.end_round(r, session)

print "Get all players"
status, body = call("/player/get_all")
check_status(status, body, 0)
check_equal(len(body), 2)

status, body = call("/player/send_notif", userid=2064575, message="test", title="test")
check_status(status, body, 0)

print "Get player 1"
status, body = call("/player/get", userid=2064575)
check_status(status, body, 0)
check_equal(body["total_points"], 1)
check_equal(body["round_points"], 0)
check_equal(body["is_alive"], False)
check_equal(body["is_active"], False)

print "Get player 2"
status, body = call("/player/get", userid=7132639)
check_status(status, body, 0)
check_equal(body["total_points"], 0)
check_equal(body["round_points"], 0)
check_equal(body["is_alive"], False)
check_equal(body["is_active"], False)

############################# START A ROUND ####################################
print "Start round again"
utils.start_round(r, session)

print "Try create new contract"
status, body = call("/contract/create", userid=2064575)
check_status(status, body, 105)

print "Check get user"
status, body = call("/player/get", userid=2064575)
check_status(status, body, 0)
check_equal(len(body["contracts"]), 2)
contractid = body["contracts"][0]["contractid"]

print "Complete contract"
status, body = call("/contract/complete", contractid=contractid)
check_status(status, body, 0)
check_equal(body["is_active"], False)
check_equal(body["is_completed"], True)

print "Check contract owner"
status, body = call("/player/get", userid=2064575)
check_status(status, body, 0)
check_equal(len(body["contracts"]), 2)
check_equal(body["total_points"], 2)
check_equal(body["round_points"], 1)
check_equal(body["is_alive"], True)

print "Check contract target"
status, body = call("/player/get", userid=7132639)
check_status(status, body, 0)
check_equal(len(body["contracts"]), 2)
check_equal(body["total_points"], 0)
check_equal(body["round_points"], 0)
check_equal(body["is_alive"], False)

print "Try create new contract"
status, body = call("/contract/create", userid=2064575)
check_status(status, body, 104)

utils.end_round(r, session)
utils.start_round(r, session)
